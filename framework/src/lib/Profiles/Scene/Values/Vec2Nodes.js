"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equal = exports.Mix = exports.Dot = exports.Normalize = exports.Length = exports.Scale = exports.Negate = exports.Subtract = exports.Add = exports.Elements = exports.Create = exports.Constant = void 0;
const NodeDescription_js_1 = require("../../../Nodes/NodeDescription.js");
const In1Out1FuncNode_js_1 = require("../../../Nodes/Templates/In1Out1FuncNode.js");
const In2Out1FuncNode_js_1 = require("../../../Nodes/Templates/In2Out1FuncNode.js");
const In3Out1FuncNode_js_1 = require("../../../Nodes/Templates/In3Out1FuncNode.js");
const VecElements_js_1 = require("../Logic/VecElements.js");
const Vec2_js_1 = require("./Internal/Vec2.js");
exports.Constant = new NodeDescription_js_1.NodeDescription('math/vec2', 'Logic', 'Constant', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec2'], 'vec2', (a) => a));
exports.Create = new NodeDescription_js_1.NodeDescription('math/create/vec2', 'Logic', 'CREATE', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['float', 'float'], 'vec2', (x, y) => new Vec2_js_1.Vec2(x, y), ['x', 'y']));
exports.Elements = new NodeDescription_js_1.NodeDescription('math/elements/vec2', 'Logic', 'CREATE', (description, graph) => new VecElements_js_1.VecElements(description, graph, 'vec2', ['x', 'y', 'z'], Vec2_js_1.vec2ToArray));
exports.Add = new NodeDescription_js_1.NodeDescription('math/add/vec2', 'Logic', '+', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec2', 'vec2'], 'vec2', Vec2_js_1.vec2Add));
exports.Subtract = new NodeDescription_js_1.NodeDescription('math/subtract/vec2', 'Logic', '-', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec2', 'vec2'], 'vec2', Vec2_js_1.vec2Subtract));
exports.Negate = new NodeDescription_js_1.NodeDescription('math/negate/vec2', 'Logic', '-', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec2'], 'vec2', Vec2_js_1.vec2Negate));
exports.Scale = new NodeDescription_js_1.NodeDescription('math/scale/vec2', 'Logic', 'ร', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec2', 'float'], 'vec2', Vec2_js_1.vec2Scale));
exports.Length = new NodeDescription_js_1.NodeDescription('math/length/vec2', 'Logic', 'LENGTH', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec2'], 'float', Vec2_js_1.vec2Length));
exports.Normalize = new NodeDescription_js_1.NodeDescription('math/normalize/vec2', 'Logic', 'NORMALIZE', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec2'], 'vec2', Vec2_js_1.vec2Normalize));
exports.Dot = new NodeDescription_js_1.NodeDescription('math/dot/vec2', 'Logic', 'DOT', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec2', 'vec2'], 'float', Vec2_js_1.vec2Dot));
exports.Mix = new NodeDescription_js_1.NodeDescription('math/mix/vec2', 'Logic', 'รท', (description, graph) => new In3Out1FuncNode_js_1.In3Out1FuncNode(description, graph, ['vec2', 'vec2', 'float'], 'vec2', Vec2_js_1.vec2Mix, ['a', 'b', 't']));
exports.Equal = new NodeDescription_js_1.NodeDescription('math/equal/vec2', 'Logic', '=', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec2', 'vec2'], 'boolean', Vec2_js_1.vec2Equals));
