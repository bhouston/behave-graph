"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equal = exports.Mix = exports.Dot = exports.Normalize = exports.Length = exports.Scale = exports.Negate = exports.Subtract = exports.Add = exports.Elements = exports.Create = exports.Constant = void 0;
const NodeDescription_js_1 = require("../../../Nodes/NodeDescription.js");
const In1Out1FuncNode_js_1 = require("../../../Nodes/Templates/In1Out1FuncNode.js");
const In2Out1FuncNode_js_1 = require("../../../Nodes/Templates/In2Out1FuncNode.js");
const In3Out1FuncNode_js_1 = require("../../../Nodes/Templates/In3Out1FuncNode.js");
const In4Out1FuncNode_js_1 = require("../../../Nodes/Templates/In4Out1FuncNode.js");
const VecElements_js_1 = require("../Logic/VecElements.js");
const Vec4_js_1 = require("./Internal/Vec4.js");
exports.Constant = new NodeDescription_js_1.NodeDescription('math/vec4', 'Logic', 'Constant', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec4'], 'vec4', (a) => a));
exports.Create = new NodeDescription_js_1.NodeDescription('math/create/vec4', 'Logic', 'CREATE', (description, graph) => new In4Out1FuncNode_js_1.In4Out1FuncNode(description, graph, ['float', 'float', 'float', 'float'], 'vec4', (x, y, z, w) => new Vec4_js_1.Vec4(x, y, z, w), ['x', 'y', 'z', 'w']));
exports.Elements = new NodeDescription_js_1.NodeDescription('math/elements/vec4', 'Logic', 'CREATE', (description, graph) => new VecElements_js_1.VecElements(description, graph, 'vec4', ['x', 'y', 'z', 'w'], Vec4_js_1.vec4ToArray));
exports.Add = new NodeDescription_js_1.NodeDescription('math/add/vec4', 'Logic', '+', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec4', 'vec4'], 'vec4', Vec4_js_1.vec4Add));
exports.Subtract = new NodeDescription_js_1.NodeDescription('math/subtract/vec4', 'Logic', '-', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec4', 'vec4'], 'vec4', Vec4_js_1.vec4Subtract));
exports.Negate = new NodeDescription_js_1.NodeDescription('math/negate/vec4', 'Logic', '-', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec4'], 'vec4', Vec4_js_1.vec4Negate));
exports.Scale = new NodeDescription_js_1.NodeDescription('math/scale/vec4', 'Logic', 'ร', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec4', 'float'], 'vec4', Vec4_js_1.vec4Scale));
exports.Length = new NodeDescription_js_1.NodeDescription('math/length/vec4', 'Logic', 'LENGTH', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec4'], 'float', Vec4_js_1.vec4Length));
exports.Normalize = new NodeDescription_js_1.NodeDescription('math/normalize/vec4', 'Logic', 'NORMALIZE', (description, graph) => new In1Out1FuncNode_js_1.In1Out1FuncNode(description, graph, ['vec4'], 'vec4', Vec4_js_1.vec4Normalize));
exports.Dot = new NodeDescription_js_1.NodeDescription('math/dot/vec4', 'Logic', 'DOT', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec4', 'vec4'], 'float', Vec4_js_1.vec4Dot));
exports.Mix = new NodeDescription_js_1.NodeDescription('math/mix/vec4', 'Logic', 'รท', (description, graph) => new In3Out1FuncNode_js_1.In3Out1FuncNode(description, graph, ['vec4', 'vec4', 'float'], 'vec4', Vec4_js_1.vec4Mix, ['a', 'b', 't']));
exports.Equal = new NodeDescription_js_1.NodeDescription('math/equal/vec4', 'Logic', '=', (description, graph) => new In2Out1FuncNode_js_1.In2Out1FuncNode(description, graph, ['vec4', 'vec4'], 'boolean', Vec4_js_1.vec4Equals));
